import os
import csv
import re

# Define paths to input and output files
INPUT_FILE = "./output/movie_results.csv"           # Input CSV generated by MapReduce
CSV_OUTPUT = "./output/final_movie_list.csv"        # Proper CSV output for UI and Excel

# Set of trailing articles we want to move to the front of titles
ARTICLES = {"The", "A", "An"}

def normalize_title(title):
    """
    Moves trailing article (e.g., ', The') to the front, preserving the year.
    Example: "Great Escape, The (1963)" -> "The Great Escape (1963)"
    """
    match = re.match(r"^(.*),\s(The|A|An)\s*(\(\d{4}\))?$", title)
    if match:
        base = match.group(1).strip()
        article = match.group(2).strip()
        year = match.group(3) if match.group(3) else ""
        return f"{article} {base} {year}".strip()
    return title


def main():
    # Make sure the input file exists
    if not os.path.exists(INPUT_FILE):
        print(f"ERROR: Input file not found at {INPUT_FILE}")
        return

    popular = []  # Will store tuples of (avgRating, [movieId, title, genre, avg, count])

    # Open the input CSV file
    with open(INPUT_FILE, "r", encoding="utf-8") as csvfile:
        reader = csv.reader(csvfile)
        header = next(reader)  # Skip the header row

        for row in reader:
            if len(row) != 6:
                continue  # Skip malformed rows

            # Extract fields
            movie_id, title, genre, avg, count, is_popular = row

            try:
                avg_float = float(avg)
                count_int = int(count)

                # Apply filters: must be marked popular and have 10+ ratings
                if is_popular.strip().lower() == "yes" and count_int >= 10:
                    clean_title = normalize_title(title.strip())
                    # Store for sorting: (avgRating, [all fields])
                    popular.append((avg_float, [movie_id, clean_title, genre.strip(), avg.strip(), count.strip()]))

            except ValueError:
                continue  # Skip rows with invalid numbers

    # Sort all popular movies by average rating (highest first)
    popular.sort(key=lambda x: x[0], reverse=True)

    # Write fully quoted .csv file for front-end or Excel
    with open(CSV_OUTPUT, "w", newline="", encoding="utf-8") as csvfile:
        writer = csv.writer(csvfile, quoting=csv.QUOTE_ALL)
        # Header (no isPopular)
        writer.writerow(["movieId", "title", "genre", "avgRating", "numRatings"])
        for _, row in popular:
            writer.writerow(row)

    # Success message
    print(f"âœ… Cleaned and saved {len(popular)} movies to:")
    print(f"- {CSV_OUTPUT}")

# Run the script
if __name__ == "__main__":
    main()
